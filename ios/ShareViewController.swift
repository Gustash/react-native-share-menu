//
//  ShareViewController.swift
//  RNShareMenu
//
//  DO NOT EDIT THIS FILE. IT WILL BE OVERRIDEN BY NPM OR YARN.
//
//  Created by Gustavo Parreira on 26/07/2020.
//

import MobileCoreServices
import UIKit
import Social
import RNShareMenu
import Intents

class ShareViewController: SLComposeServiceViewController {
  var hostAppUrlScheme: String!
  var userDefaults: UserDefaults!
  var groupFileManagerContainer: URL!
  
  override func viewDidLoad() {
    super.viewDidLoad()

    let hostAppId = Bundle.main.object(forInfoDictionaryKey: HOST_APP_IDENTIFIER_INFO_PLIST_KEY) as? String
    assert(hostAppId != nil, NO_INFO_PLIST_INDENTIFIER_ERROR)

    let hostAppUrlScheme = Bundle.main.object(forInfoDictionaryKey: HOST_URL_SCHEME_INFO_PLIST_KEY) as? String
    assert(hostAppUrlScheme != nil, NO_INFO_PLIST_URL_SCHEME_ERROR)

    let userDefaults = UserDefaults(suiteName: "group.\(hostAppId!)")
    assert(userDefaults != nil, NO_APP_GROUP_ERROR)
    
    let groupFileManagerContainer = FileManager.default
      .containerURL(forSecurityApplicationGroupIdentifier: "group.\(hostAppId!)")
    assert(groupFileManagerContainer != nil, NO_APP_GROUP_ERROR)

    self.hostAppUrlScheme = hostAppUrlScheme!
    self.userDefaults = userDefaults!
    self.groupFileManagerContainer = groupFileManagerContainer

    if #available(iOSApplicationExtension 13.0, *), let intent = self.extensionContext?.intent as? INSendMessageIntent {
      let conversationIdentifier = intent.conversationIdentifier
      storeConversationId(conversationIdentifier!)
    } else {
      removeConversationId()
    }
  }

    override func isContentValid() -> Bool {
        // Do validation of contentText and/or NSExtensionContext attachments here
        return true
    }

    override func didSelectPost() {
        // This is called after the user selects Post. Do the upload of contentText and/or NSExtensionContext attachments.
      guard let item = extensionContext?.inputItems.first as? NSExtensionItem else {
        cancelRequest()
        return
      }

      handlePost(item)
    }

    override func configurationItems() -> [Any]! {
      guard #available(iOSApplicationExtension 13.0, *),
            let intent = self.extensionContext?.intent as? INSendMessageIntent,
            let item = SLComposeSheetConfigurationItem() else {
          return []
      }

      item.title = NSLocalizedString("To:", comment: "The To: label when sharing content.")
      if let groupName = intent.groupName {
        item.value = groupName
      } else {
        item.value = intent.recipients?.map { $0.displayName }.joined(separator: ", ")
      }

      return [item]
    }

  func handlePost(_ item: NSExtensionItem, extraData: [String:Any]? = nil) {
    guard let provider = item.attachments?.first else {
      cancelRequest()
      return
    }

    if let data = extraData {
      storeExtraData(data)
    } else {
      removeExtraData()
    }

    if provider.isURL {
      storeUrl(withProvider: provider)
    } else if provider.isFileURL {
      storeFile(withProvider: provider)
    } else {
      storeText(withProvider: provider)
    }
  }

  func storeExtraData(_ data: [String:Any]) {
    userDefaults.set(data, forKey: USER_DEFAULTS_EXTRA_DATA_KEY)
    userDefaults.synchronize()
  }

  func removeExtraData() {
    userDefaults.removeObject(forKey: USER_DEFAULTS_EXTRA_DATA_KEY)
    userDefaults.synchronize()
  }
  
  func storeConversationId(_ conversationId: String) {
    userDefaults.set(conversationId, forKey: USER_DEFAULTS_CONVERSATION_ID_KEY)
    userDefaults.synchronize()
  }
  
  func removeConversationId() {
    userDefaults.removeObject(forKey: USER_DEFAULTS_CONVERSATION_ID_KEY)
    userDefaults.synchronize()
  }
  
  func storeText(withProvider provider: NSItemProvider) {
    provider.loadItem(forTypeIdentifier: kUTTypeText as String, options: nil) { (data, error) in
      guard (error == nil) else {
        self.exit(withError: error.debugDescription)
        return
      }
      guard let text = data as? String else {
        self.exit(withError: COULD_NOT_FIND_STRING_ERROR)
        return
      }
      
      self.userDefaults.set([DATA_KEY: text, MIME_TYPE_KEY: "text/plain"],
                       forKey: USER_DEFAULTS_KEY)
      self.userDefaults.synchronize()
      
      self.openHostApp()
    }
  }
  
  func storeUrl(withProvider provider: NSItemProvider) {
    provider.loadItem(forTypeIdentifier: kUTTypeURL as String, options: nil) { (data, error) in
      guard (error == nil) else {
        self.exit(withError: error.debugDescription)
        return
      }
      guard let url = data as? URL else {
        self.exit(withError: COULD_NOT_FIND_URL_ERROR)
        return
      }
      
      self.userDefaults.set([DATA_KEY: url.absoluteString, MIME_TYPE_KEY: "text/plain"],
                       forKey: USER_DEFAULTS_KEY)
      self.userDefaults.synchronize()
      
      self.openHostApp()
    }
  }
  
  func storeFile(withProvider provider: NSItemProvider) {
    provider.loadItem(forTypeIdentifier: kUTTypeData as String, options: nil) { (data, error) in
      guard (error == nil) else {
        self.exit(withError: error.debugDescription)
        return
      }
      guard let url = data as? URL else {
        self.exit(withError: COULD_NOT_FIND_IMG_ERROR)
        return
      }
      
      let mimeType = url.extractMimeType()
      let fileExtension = url.pathExtension
      let fileName = UUID().uuidString
      let filePath = self.groupFileManagerContainer
        .appendingPathComponent("\(fileName).\(fileExtension)")
      
      guard self.moveFileToDisk(from: url, to: filePath) else {
        self.exit(withError: COULD_NOT_SAVE_FILE_ERROR)
        return
      }
      
      self.userDefaults.set([DATA_KEY: filePath.absoluteString,  MIME_TYPE_KEY: mimeType],
                       forKey: USER_DEFAULTS_KEY)
      self.userDefaults.synchronize()
      
      self.openHostApp()
    }
  }

  func moveFileToDisk(from srcUrl: URL, to destUrl: URL) -> Bool {
    do {
      if FileManager.default.fileExists(atPath: destUrl.path) {
        try FileManager.default.removeItem(at: destUrl)
      }
      try FileManager.default.copyItem(at: srcUrl, to: destUrl)
    } catch (let error) {
      print("Could not save file from \(srcUrl) to \(destUrl): \(error)")
      return false
    }
    
    return true
  }
  
  func exit(withError error: String) {
    print("Error: \(error)")
    cancelRequest()
  }
  
  internal func openHostApp() {
    let url = URL(string: hostAppUrlScheme)
    let selectorOpenURL = sel_registerName("openURL:")
    var responder: UIResponder? = self
    
    while responder != nil {
      if responder?.responds(to: selectorOpenURL) == true {
        responder?.perform(selectorOpenURL, with: url)
      }
      responder = responder!.next
    }
    
    completeRequest()
  }
  
  func completeRequest() {
    // Inform the host that we're done, so it un-blocks its UI. Note: Alternatively you could call super's -didSelectPost, which will similarly complete the extension context.
    extensionContext!.completeRequest(returningItems: [], completionHandler: nil)
  }
  
  func cancelRequest() {
    extensionContext!.cancelRequest(withError: NSError())
  }

}
